resultat <- resultat[order(-resultat$score),]
resultat2 <- read.table("manuSuite/alignementmanu2.csv",sep="\t",quote="")
colnames(resultat2) <- c("dci2","score","substance","code", "manu")
bool <- resultat$dci2 == resultat2$
dci2
resultat <- read.table("manuSuite/alignementmanu2.csv",sep="\t",quote="")
colnames(resultat) <- c("dci2","score","substance","code", "manu")
resultat$substance <- NULL
substances <- read.table("substancesANSM/substances_ANSM.csv",sep="\t",header=T)
View(substances)
substances <- read.table("substancesANSM/substances_ANSM.csv",sep="\t",header=F)
colnames(substances) <- c("code","substances","libelle")
resultat2 <- merge (resultat, substances, by="code")
View(resultat2)
colnames(resultat2)
colnames(alignement1)
View(alignement1)
substances$libelle <- NULL
resultat2 <- merge (resultat, substances, by="code")
alignement1$substance <- NULL
all(alignement1$code %in% substances$codes)
all(alignement1$code %in% substances$code)
alignement1 <- merge (alignement1, substances, by="code")
colnames(resultat2)
colnames(alignement1)
bool <- resultat2$dci2 %in% alignement1$dcirenommer
sum(bool)
rm(list=ls())
alignement1 <- read.table("RelationThesaurusRepertoireTemp1.csv",sep="\t",header=T,
stringsAsFactors = F)
## toutes les dci, renommés ou non :
alldci <- unique(c(alignement1$dci, alignement1$dcirenommer))
bool <- (is.na(alldci))
alldci <- alldci[!bool]
writeLines(as.character(alldci), "manuSuite/dcithesaurusSuite.txt")
## resultats
resultat <- read.table("manuSuite/dcithesaurusSuitePropositions.txt",sep="\t",quote="",
fill=T,stringsAsFactors = F)
colnames(resultat) <- c("dci2","score","substance","code")
resultat$dci <- alldci
View(resultat)
colnames(resultat) <- c("dci","score","substance","code")
## Je procède par élimination :
# je retire tous les codes du répertoire des médicaments que je connais
# je recherche dans les libellés des codes que je ne connais pas
bool <- resultat$code %in% alignement1$code
resultat <- subset (resultat, !bool)
resultat$score <- as.numeric(resultat$score)
## enlève les non trouvés
resultat <- subset (resultat, !is.na(score))
resultat <- resultat[order(-resultat$score),]
fichier <- "manuSuite/alignementmanu2.csv"
if (!file.exists(fichier)){
write.table(resultat,fichier, sep="\t",col.names=T, row.names=F,quote=F)
}
resultat <- read.table("manuSuite/alignementmanu2.csv",sep="\t",quote="")
colnames(resultat) <- c("dci2","score","substance","code", "manu")
resultat$substance <- NULL
## charge les substances
substances <- read.table("substancesANSM/substances_ANSM.csv",sep="\t",header=F)
colnames(substances) <- c("code","substances","libelle")
substances$libelle <- NULL
resultat2 <- merge (resultat, substances, by="code")
## pareil pour alignement1
alignement1$substance <- NULL
all(alignement1$code %in% substances$code)
alignement1 <- merge (alignement1, substances, by="code")
colnames(resultat2)
colnames(alignement1)
colnames(resultat) <- c("dci","score","substance","code", "manu")
rm(list=ls())
alignement1 <- read.table("RelationThesaurusRepertoireTemp1.csv",sep="\t",header=T,
stringsAsFactors = F)
## toutes les dci, renommés ou non :
alldci <- unique(c(alignement1$dci, alignement1$dcirenommer))
bool <- (is.na(alldci))
alldci <- alldci[!bool]
writeLines(as.character(alldci), "manuSuite/dcithesaurusSuite.txt")
## resultats
resultat <- read.table("manuSuite/dcithesaurusSuitePropositions.txt",sep="\t",quote="",
fill=T,stringsAsFactors = F)
colnames(resultat) <- c("dci","score","substance","code")
## Je procède par élimination :
# je retire tous les codes du répertoire des médicaments que je connais
# je recherche dans les libellés des codes que je ne connais pas
bool <- resultat$code %in% alignement1$code
resultat <- subset (resultat, !bool)
resultat$score <- as.numeric(resultat$score)
## enlève les non trouvés
resultat <- subset (resultat, !is.na(score))
resultat <- resultat[order(-resultat$score),]
fichier <- "manuSuite/alignementmanu2.csv"
if (!file.exists(fichier)){
write.table(resultat,fichier, sep="\t",col.names=T, row.names=F,quote=F)
}
resultat <- read.table("manuSuite/alignementmanu2.csv",sep="\t",quote="")
colnames(resultat) <- c("dci","score","substance","code", "manu")
resultat$substance <- NULL
## charge les substances
substances <- read.table("substancesANSM/substances_ANSM.csv",sep="\t",header=F)
colnames(substances) <- c("code","substances","libelle")
substances$libelle <- NULL
resultat2 <- merge (resultat, substances, by="code")
## pareil pour alignement1
alignement1$substance <- NULL
all(alignement1$code %in% substances$code)
alignement1 <- merge (alignement1, substances, by="code")
colnames(resultat2)
colnames(alignement1)
bool <- resultat2$dci %in% alignement1$dcirenommer
sum(bool)
resultat2$dcirenommer <- ifelse (bool, resultat2$dci, NA)
resultat2$dci <- ifelse (bool, NA, resultat2$dci)
colnames(resultat2)
colnames(alignement1)
resultat2$validation <- "semiautomatique"
resultat2$score <- NULL
test <- rbind (alignement1, resultat2)
colnames(resultat2)
colnames(resultat2)[3] <- "relation"
colnames(resultat2)[3] <- "relation"
test <- rbind (alignement1, resultat2)
test <- unique(test)
View(test)
rm(list=ls())
alignement1 <- read.table("RelationThesaurusRepertoireTemp1.csv",sep="\t",header=T,
stringsAsFactors = F)
## toutes les dci, renommés ou non :
alldci <- unique(c(alignement1$dci, alignement1$dcirenommer))
bool <- (is.na(alldci))
alldci <- alldci[!bool]
writeLines(as.character(alldci), "manuSuite/dcithesaurusSuite.txt")
## resultats
resultat <- read.table("manuSuite/dcithesaurusSuitePropositions.txt",sep="\t",quote="",
fill=T,stringsAsFactors = F)
colnames(resultat) <- c("dci","score","substance","code")
## Je procède par élimination :
# je retire tous les codes du répertoire des médicaments que je connais
# je recherche dans les libellés des codes que je ne connais pas
bool <- resultat$code %in% alignement1$code
resultat <- subset (resultat, !bool)
resultat$score <- as.numeric(resultat$score)
## enlève les non trouvés
resultat <- subset (resultat, !is.na(score))
resultat <- resultat[order(-resultat$score),]
fichier <- "manuSuite/alignementmanu2.csv"
if (!file.exists(fichier)){
write.table(resultat,fichier, sep="\t",col.names=T, row.names=F,quote=F)
}
resultat <- read.table("manuSuite/alignementmanu2.csv",sep="\t",quote="", stringsAsFactors = F)
colnames(resultat) <- c("dci","score","substance","code", "manu")
resultat$substance <- NULL
## charge les substances
substances <- read.table("substancesANSM/substances_ANSM.csv",sep="\t",header=F, stringsAsFactors = F)
colnames(substances) <- c("code","substances","libelle")
substances$libelle <- NULL
resultat2 <- merge (resultat, substances, by="code")
## pareil pour alignement1
alignement1$substance <- NULL
all(alignement1$code %in% substances$code)
alignement1 <- merge (alignement1, substances, by="code")
colnames(resultat2)
colnames(alignement1)
bool <- resultat2$dci %in% alignement1$dcirenommer
sum(bool)
resultat2$dcirenommer <- ifelse (bool, resultat2$dci, NA)
resultat2$dci <- ifelse (bool, NA, resultat2$dci)
colnames(resultat2)
colnames(alignement1)
resultat2$validation <- "semiautomatique"
resultat2$score <- NULL
colnames(resultat2)[3] <- "relation"
test <- rbind (alignement1, resultat2)
View(test)
both <- rbind (alignement1, resultat2)
both <- unique(both)
temp <- subset (alignement1, !is.na(dcirenommer))
temp <- subset (alignement1, !is.na(dcirenommer),select=c(dci, dcirenommer))
temp <- unique(temp)
colnames(temp)
colnames(temp) <- c("dciajout","dcirenommer")
both2 <- merge (both, temp, by="dcirenommer",all.x=T)
bool <- is.na(both2$dci)
sum(bool)
both2$dci <- ifelse (bool, both2$dciajout, both2$dci)
bool <- is.na(both2$dci)
sum(bool)
both2$dciajout <- NULL
both2 <- both2[order(both2$dci),]
View(both2)
both3 <- subset (both2, select = c("dci","dcirenommer","relation","code","substance","validation"))
colnames(both2)
both3 <- subset (both2, select = c("dci","dcirenommer","relation","code","substances","validation"))
View(both3)
table(both3$relation)
keep <- subset (both3, relation %in% c("same","hasform","formof") )
View(keep)
write.table(keep,"RelationThesaurusRepertoireFinal28102016.csv",sep="\t",col.names=T, row.names=F)
louis <- both3
louis$relation <- ""
write.table(louis,"RelationAvalider28102016.csv",sep="\t",col.names=T, row.names=F)
write.table(keep,"RelationThesaurusRepertoireFinal28102016.csv",sep="\t",col.names=T, row.names=F,na = "")
write.table(louis,"RelationAvalider28102016.csv",sep="\t",col.names=T, row.names=F,na="")
##### Dans alignementALL, j'ai recherché des alignements 1 à 1
### Or il est peut être possible qu'il existe 1 molécule dans le thésuarus
## correspond à plusieurs molécules dans le répertoire ANSM
rm(list=ls())
alignement1 <- read.table("RelationThesaurusRepertoireTemp1.csv",sep="\t",header=T,
stringsAsFactors = F)
## toutes les dci, renommés ou non :
alldci <- unique(c(alignement1$dci, alignement1$dcirenommer))
bool <- (is.na(alldci))
alldci <- alldci[!bool]
writeLines(as.character(alldci), "manuSuite/dcithesaurusSuite.txt")
## resultats
resultat <- read.table("manuSuite/dcithesaurusSuitePropositions.txt",sep="\t",quote="",
fill=T,stringsAsFactors = F)
colnames(resultat) <- c("dci","score","substance","code")
## Je procède par élimination :
# je retire tous les codes du répertoire des médicaments que je connais
# je recherche dans les libellés des codes que je ne connais pas
bool <- resultat$code %in% alignement1$code
resultat <- subset (resultat, !bool)
resultat$score <- as.numeric(resultat$score)
## enlève les non trouvés
resultat <- subset (resultat, !is.na(score))
resultat <- resultat[order(-resultat$score),]
fichier <- "manuSuite/alignementmanu2.csv"
if (!file.exists(fichier)){
write.table(resultat,fichier, sep="\t",col.names=T, row.names=F,quote=F)
}
resultat <- read.table("manuSuite/alignementmanu2.csv",sep="\t",quote="", stringsAsFactors = F)
colnames(resultat) <- c("dci","score","substance","code", "manu")
resultat$substance <- NULL
## charge les substances
substances <- read.table("substancesANSM/substances_ANSM.csv",sep="\t",header=F, stringsAsFactors = F)
colnames(substances) <- c("code","substances","libelle")
substances$libelle <- NULL
resultat2 <- merge (resultat, substances, by="code")
## pareil pour alignement1
alignement1$substance <- NULL
all(alignement1$code %in% substances$code)
alignement1 <- merge (alignement1, substances, by="code")
colnames(resultat2)
colnames(alignement1)
bool <- resultat2$dci %in% alignement1$dcirenommer
sum(bool)
resultat2$dcirenommer <- ifelse (bool, resultat2$dci, NA)
resultat2$dci <- ifelse (bool, NA, resultat2$dci)
colnames(resultat2)
colnames(alignement1)
resultat2$validation <- "semiautomatique"
resultat2$score <- NULL
colnames(resultat2)[3] <- "relation"
##
both <- rbind (alignement1, resultat2)
both <- unique(both)
## je dois rajouter les dci pour les dci renommées
temp <- subset (alignement1, !is.na(dcirenommer),select=c(dci, dcirenommer))
temp <- unique(temp)
colnames(temp) <- c("dciajout","dcirenommer")
both2 <- merge (both, temp, by="dcirenommer",all.x=T)
bool <- is.na(both2$dci)
sum(bool)
both2$dci <- ifelse (bool, both2$dciajout, both2$dci)
both2$dciajout <- NULL
both2 <- both2[order(both2$dci),]
both3 <- subset (both2, select = c("dci","dcirenommer","relation","code","substances","validation"))
#### au final :
table(both3$relation)
keep <- subset (both3, relation %in% c("same","hasform","formof") )
louis <- both3
louis$relation <- ""
colnames(louis)
bool <- louis$validation = ="automatique"
bool <- louis$validation =="automatique"
sum(bool)
temp <- subset (louis, bool)
louis <- subset (louis, !code %in% temp$code)
write.table(louis,"RelationAvalider28102016.csv",sep="\t",col.names=T, row.names=F,na="")
###### Mapping entre toutes les substances du thésaurus et les substances de la base ANSM
rm(list=ls())
### toutes les molécules des thesauri ont été extraites depuis 2010
## On cherche à trouver un lien entre ces molécules et les substances du répertoire ANSM
## Les substances du répertoire ANSM ont été indexées dans Lucene
dci <- readLines("../dciThesaurus/moleculesthesaurus.txt")
length(dci) ## Le programme JAVA recherche dans l'index ces 1131 libellés
resultat <- read.table("substancesANSM/moleculesthesaurus_proposition.txt",sep="\t",fill=T,quote="", stringsAsFactors = F)
colnames(resultat) <- c("dci2","score","substance","code")
resultat$dci <- dci
resultat$score <- as.numeric(resultat$score)
colnames(resultat)
## colonnes :
# dci : libellé comme il apparait dans le thésaurus des interactions
# dci2 : libellé normalisé par le programme JAVA, comme il est recherché dans l'index
# score : score renvoyé par Lucene
# substance : libellé de la substance du répertoire des médicaments de l'ANSM
# code : code de la substance dans le répertoire des médicaments de l'ANSM
## fonction pour détecter un match parfait
get_perfect <- function(resultat){
bool <- resultat$dci2 == resultat$substance
perfect <- subset (resultat, bool)
cat(length(unique(perfect$dci)), " perfect match trouvés \n")
return(perfect)
}
########
#### Etape 1 : validation automatique
perfect <- get_perfect(resultat)
# relation
perfect$manu <- "same"
# méthode
perfect$validation <- "automatique"
resultat <- subset (resultat, !code %in% perfect$code)
########
#### Etape 2 : validation semi-automatique
## j'ai pris un score de 4 arbitrairement
partial4 <- subset (resultat, score > 4)
partial4 <- partial4[order(-partial4$score),]
## ouverture du fichier dans un tableur Excel et validation semi-automatique
if (!file.exists("manu/imparfait1.csv")){
write.table(partial4, "manu/imparfait1.csv",sep="\t",col.names=T, row.names=F)
}
partial4 <- read.table("manu/imparfait1.csv",sep="\t",header=T)
table(partial4$manu)
partial4 <- subset (partial4, manu != 0)
partial4$validation <- "semiautomatique"
perfect2 <- rbind (perfect, partial4)
resultat <- subset (resultat, !code %in% perfect2$code)
########
#### Etape 2 bis : validation semi-automatique encore
bool <- !is.na(resultat$score)
partial <- subset (resultat, bool)
partial <- partial[order(-partial$score),]
######
if (!file.exists("manu/imparfait2.csv")){
write.table(partial, "manu/imparfait2.csv",sep="\t",col.names=T, row.names=F)
}
partial <- read.table("manu/imparfait2.csv",sep="\t",header=T,quote="")
partial <- subset (partial, manu != 0)
partial$validation <- "semiautomatique"
perfect3 <- rbind (perfect2, partial)
resultat <- subset (resultat, !code %in% perfect3$code)
########
#### Etape 3 : validation manuelle
## j'essaie de comprendre manuellement pourquoi certaines molécules du thésaurus
# n'ont pas été trouvées dans les substances du répertoire de l'ANSM
## ménages :
trouve <- perfect3
partial <- NULL
perfect2 <- NULL
perfect <- NULL
perfect3 <- NULL
partial4 <- NULL
resultat <- NULL
## non trouvé  :
bool <- dci %in% trouve$dci
non_trouve <- unique(dci[!bool])
length(unique(non_trouve)) ## 82 molécules non trouvées
non_trouve <- data.frame(dci = non_trouve)
# on va modifier le libellé de la substance pour pouvoir la trouver
non_trouve$dci2 <- as.character(non_trouve$dci)
# liste des molecules exclues par le service de pharmacovigilance
exclus <- readLines("manu/exclus_dci_manuel.txt")
bool <- non_trouve$dci %in% toupper(exclus)
sum(bool)
non_trouve$dci2[bool] <- "exclusServicePharmacovigilance"
# modifications manuelles des libelles
# fonction pour remplacer dci2
remplacer <- function(regex, remplacement){
bool <- grepl(regex, non_trouve$dci,ignore.case = T)
if (any(bool)){
print (non_trouve$dci[bool])
non_trouve$dci2[bool] <- remplacement
return (non_trouve)
} else {
cat (regex, "pas trouvé \n")
return(non_trouve)
}
}
## variations lexicales :
non_trouve <- remplacer ("tioguanine","thioguanine")
non_trouve <- remplacer ("pimethixene","pimetixene")
non_trouve <- remplacer ("acetylsulfafurazol","acetyl sulfafurazol")
non_trouve <- remplacer ("peg-interferon alfa-2a","peginterferon alfa-2a")
non_trouve <- remplacer ("aliskiren","aliskirene")
non_trouve <- remplacer ("bupropion","bupropione")
non_trouve <- remplacer ("CERTOLUZUMAB","CERTOLIZUMAB")
non_trouve <- remplacer ("ESLICARBAMAZEPINE","ESLICARBAZEPINE")
non_trouve <- remplacer ("ESCLICARBAZEPINE","ESLICARBAZEPINE")
non_trouve <- remplacer ("MYRISTALKONIUM","MIRISTALKONIUM")
non_trouve <- remplacer ("ALUMINIUM","GEL D'HYDROXYDE D'ALUMINIUM ET DE CARBONATE DE MAGNÉSIUM CODESSÉCHÉS")
non_trouve <- remplacer ("ETORECOXIB","ETORICOXIB")
## famipridine : il y en a 2
non_trouve <- remplacer ("FAMPRIDINE","AMIFAMPRIDINE")
non_trouve <- rbind (non_trouve, data.frame(dci = "FAMPRIDINES",dci2="FAMPRIDINE"))
## autre nom
non_trouve <- remplacer ("rougeoleux","rougeole")
non_trouve <- remplacer ("succinylcholine","suxamethonium")
non_trouve <- remplacer ("ricinus","ricin")
non_trouve <- remplacer ("styrenesulfonate","polystyrene sulfonate de calcium")
non_trouve <- remplacer ("piroxicam","piroxicam-betacyclodextrine (complexe)")
non_trouve <- remplacer ("p a s sodique","p a s sodique anhydre")
non_trouve <- remplacer ("immunoglobulines equines antilymphocyte humain","immunoglobuline equine anti-thymocytes humains")
non_trouve <- remplacer ("norepinephrine","noradrenaline")
non_trouve <- remplacer ("catioresine sulfo sodique","sodium (polystyrene sulfonate de)")
non_trouve <- remplacer ("dicitrate trimagnesien","citrate de magnesium")
## non commercialisé :
non_trouve <- remplacer ("azatadine","NonCommercialisé")
non_trouve <- remplacer ("barbital","NonCommercialisé")
non_trouve <- remplacer ("colestilan","NonCommercialisé")
non_trouve <- remplacer ("delorazepam","NonCommercialisé")
non_trouve <- remplacer ("fenbufene","NonCommercialisé")
# excipient
non_trouve <- remplacer ("nonoxynol","Excipient")
# métabolite de l'amitriptyline deja present dans le thesaurus :
non_trouve <- remplacer ("nortriptyline","Metabolite")
# familles ou aliments non presents
non_trouve <- remplacer("fer par voie injectable","Famille")
non_trouve <- remplacer("voie vaginale","Famille")
non_trouve <- remplacer("voie orale","Famille")
non_trouve <- remplacer("pamplemousse","Aliment")
non_trouve <- remplacer("preservatifs","Dispositif")
non_trouve <- remplacer("theine","Aliment")
## ajout des acides
bool <- grepl("^acide",dci,ignore.case = T)
acides <- dci[bool]
acides2 <- gsub ("acide ","",acides,ignore.case = T)
acides2 <- gsub ("ique$","ATE",acides2,ignore.case = T)
bool <- grepl("acide",non_trouve$dci,ignore.case = T)
non_trouve <- rbind (non_trouve, data.frame(dci=acides, dci2 = acides2))
## on retire tous ceux qu'on ne va pas chercher :
sort(table(non_trouve$dci2))
exclus <- c("exclusServicePharmacovigilance","NonCommercialisé",
"Aliment","Dispositif","Metabolite","Excipient","Famille")
exclus <- subset (non_trouve, dci2 %in% exclus)
non_trouve <- subset (non_trouve, !dci2 %in% exclus$dci2)
### Recherche dans l'index Lucene les molécules non trouvées
## après modifications de leurs libellés
fichier <- "substancesANSM/moleculesthesaurus_non_trouve.txt"
if (!file.exists(fichier)){
writeLines(non_trouve$dci2,fichier)
}
## le programme JAVA sort un fichier .txt, le modifier par .csv
# Le fichier est ensuite ouvert dans LibreOffice pour validation semi-automatique
resultat_non <-  read.table("manu/non_trouve_proposition.csv",sep="\t",fill=T,quote="", stringsAsFactors = F)
colnames(resultat_non) <- c("dci2","score","substance","code", "manu")
resultat_non$dcirenommer <- non_trouve$dci2
resultat_non$dci <- non_trouve$dci
# dci : libellé comme il apparait dans le thésaurus des interactions
# dcirenommer : libellé remplacé manuellement
# dci2 : libellé renommé, comme il est recherché dans l'index
# score : score renvoyé par Lucene
# substance : libellé de la substance du répertoire des médicaments de l'ANSM
# code : code de la substance dans le répertoire des médicaments de l'ANSM
perfect_non <- subset (resultat_non, manu !=0)
trouve$dcirenommer <- NA
perfect_non$validation <- "manuelle"
perfect4 <- rbind (trouve, perfect_non)
table(perfect4$manu)
### Au total, les non trouvés :
bool <- dci %in% perfect4$dci
sum(!bool) ### 49 non matchés
dci[!bool] ## Ces molécules présentent dans le thésaurus ne sont pas trouvées
# dans le répertoire des médicaments de l'ANSM
bool <- !dci %in% exclus$dci & !dci %in% perfect4$dci
dci_exclusajout <- dci[bool] ## "MAGNESIUM (HYDROXDE DE)" "PEG-INTERFERON"   non trouvés et non exclus par le service de pharmacovigilance
dci_exclusajout <- data.frame (dci = dci_exclusajout, exclus="")
output <- perfect4
colonnes <- c("dci","dcirenommer","manu","code","substance","validation")
output <- subset (output, select=colonnes)
colnames(output) <- c("dci","dcirenommer","relation","code","substance","validation")
### colonnes :
# dci : libellé comme il apparait dans le thésaurus des interactions
# dcirenommer : dci remplacé manuellement, dans certains cas, par celui-ci pour matcher
# relation : dci - relation - substance ANSM (relation du triplet)
# code : code de la substance dans le répertoire des médicaments de l'ANSM
# substance : libellé de la substance du répertoire des médicaments de l'ANSM
# validation : automatique, semiautomatique ou manuel
#### Export (commentés)
# write.table(output,"RelationThesaurusRepertoireTemp1.csv",sep="\t",col.names=T, row.names=F)
# write.table(dci_exclusajout,"exclus.csv",sep="\t",col.names=T, row.names=F)
exclus <- rbind (exclus, dci_exclusajout)
colnames(exclus)
bool <- !dci %in% exclus$dci & !dci %in% perfect4$dci
dci_exclusajout <- dci[bool] ## "MAGNESIUM (HYDROXDE DE)" "PEG-INTERFERON"   non trouvés et non exclus par le service de pharmacovigilance
dci_exclusajout <- data.frame (dci = dci_exclusajout, dci2="")
colnames(exclus)
colnames()
exclus <- rbind (exclus, dci_exclusajout)
write.table(exclus,"exclus.csv",sep="\t",col.names=T, row.names=F)
library(IMthesaurusANSM)
rm(list=ls())
library(IMthesaurusANSM)
df <- thesaurus72013
## Familles :
variables <- c("thesaurus2009","thesaurus2010", "thesaurus2011", "thesaurus032012",
"thesaurus122012", "thesaurus72013","thesaurus2014","thesaurus012015",
"thesaurus062015")
### chargement de toutes les extractions
df <- NULL
i <- variables[1]
for (i in variables){
temp <- get(i)
df <- rbind(df,temp$mol_famille)
df <- unique(df)
}
View(df)
df <- subset (df, select=c("famille"))
df <- unique(df)
write.table(df,"famillesThesauri.csv", sep="\t", col.names=T, row.names=F)
getwd()
write.table(df,"famillesThesauri.csv", sep="\t", col.names=T, row.names=F)
